# This file was auto-generated by Fern from our API Definition.

import typing

from humanloop.client import AsyncHumanloop, Humanloop

from .utilities import validate_response


async def test_create(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "function": {"name": "name", "description": "description", "parameters": {"parameters": {"key": "value"}}},
        "source_code": "source_code",
        "setup_values": {"setup_values": {"key": "value"}},
        "tool_type": "pinecone_search",
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
        "signature": "signature",
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "function": {"name": None, "description": None, "parameters": ("dict", {0: (None, None)})},
        "source_code": None,
        "setup_values": ("dict", {0: (None, None)}),
        "tool_type": None,
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
        "signature": None,
    }
    response = client.tools.create()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.create()
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "function": {"name": "name", "description": "description", "parameters": {"parameters": {"key": "value"}}},
        "source_code": "source_code",
        "setup_values": {"setup_values": {"key": "value"}},
        "tool_type": "pinecone_search",
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
        "signature": "signature",
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "function": {"name": None, "description": None, "parameters": ("dict", {0: (None, None)})},
        "source_code": None,
        "setup_values": ("dict", {0: (None, None)}),
        "tool_type": None,
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
        "signature": None,
    }
    response = client.tools.get(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.get(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Humanloop, async_client: AsyncHumanloop) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.tools.delete(id="id") is None  # type: ignore[func-returns-value]

    assert await async_client.tools.delete(id="id") is None  # type: ignore[func-returns-value]


async def test_update(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "function": {"name": "name", "description": "description", "parameters": {"parameters": {"key": "value"}}},
        "source_code": "source_code",
        "setup_values": {"setup_values": {"key": "value"}},
        "tool_type": "pinecone_search",
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
        "signature": "signature",
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "function": {"name": None, "description": None, "parameters": ("dict", {0: (None, None)})},
        "source_code": None,
        "setup_values": ("dict", {0: (None, None)}),
        "tool_type": None,
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
        "signature": None,
    }
    response = client.tools.update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.update(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_list_versions(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "records": [
            {
                "id": "id",
                "name": "name",
                "version_id": "version_id",
                "directory_id": "directory_id",
                "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "created_by": {"id": "id", "email_address": "email_address"},
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "path": "path",
                "function": {"name": "name", "description": "description"},
                "source_code": "source_code",
                "tool_type": "pinecone_search",
                "commit_message": "commit_message",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [{"name": "name"}],
                "signature": "signature",
            }
        ]
    }
    expected_types: typing.Any = {
        "records": (
            "list",
            {
                0: {
                    "id": None,
                    "name": None,
                    "version_id": None,
                    "directory_id": None,
                    "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
                    "created_at": "datetime",
                    "updated_at": "datetime",
                    "created_by": {"id": None, "email_address": None},
                    "status": None,
                    "last_used_at": "datetime",
                    "path": None,
                    "function": {"name": None, "description": None},
                    "source_code": None,
                    "tool_type": None,
                    "commit_message": None,
                    "version_logs_count": "integer",
                    "total_logs_count": "integer",
                    "inputs": ("list", {0: {"name": None}}),
                    "signature": None,
                }
            },
        )
    }
    response = client.tools.list_versions(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.list_versions(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_deploy(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "function": {"name": "name", "description": "description", "parameters": {"parameters": {"key": "value"}}},
        "source_code": "source_code",
        "setup_values": {"setup_values": {"key": "value"}},
        "tool_type": "pinecone_search",
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
        "signature": "signature",
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "function": {"name": None, "description": None, "parameters": ("dict", {0: (None, None)})},
        "source_code": None,
        "setup_values": ("dict", {0: (None, None)}),
        "tool_type": None,
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
        "signature": None,
    }
    response = client.tools.deploy(id="id", version_id="version_id", environment_id="environment_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.deploy(id="id", version_id="version_id", environment_id="environment_id")
    validate_response(async_response, expected_response, expected_types)


async def test_commit(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "function": {"name": "name", "description": "description", "parameters": {"parameters": {"key": "value"}}},
        "source_code": "source_code",
        "setup_values": {"setup_values": {"key": "value"}},
        "tool_type": "pinecone_search",
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
        "signature": "signature",
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "function": {"name": None, "description": None, "parameters": ("dict", {0: (None, None)})},
        "source_code": None,
        "setup_values": ("dict", {0: (None, None)}),
        "tool_type": None,
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
        "signature": None,
    }
    response = client.tools.commit(id="id", version_id="version_id", commit_message="commit_message")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.commit(id="id", version_id="version_id", commit_message="commit_message")
    validate_response(async_response, expected_response, expected_types)


async def test_log(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "tool_id": "tool_id",
        "version_id": "version_id",
        "session_id": "session_id",
    }
    expected_types: typing.Any = {"id": None, "tool_id": None, "version_id": None, "session_id": None}
    response = client.tools.log()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.log()
    validate_response(async_response, expected_response, expected_types)


async def test_update_evaluators(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "function": {"name": "name", "description": "description", "parameters": {"parameters": {"key": "value"}}},
        "source_code": "source_code",
        "setup_values": {"setup_values": {"key": "value"}},
        "tool_type": "pinecone_search",
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
        "signature": "signature",
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "function": {"name": None, "description": None, "parameters": ("dict", {0: (None, None)})},
        "source_code": None,
        "setup_values": ("dict", {0: (None, None)}),
        "tool_type": None,
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
        "signature": None,
    }
    response = client.tools.update_evaluators(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.update_evaluators(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_list_templates(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = [
        {
            "name": "name",
            "description": "description",
            "parameters": {"parameters": {"key": "value"}},
            "signature": "signature",
            "setup_schema": {"setup_schema": {"key": "value"}},
        }
    ]
    expected_types: typing.Any = (
        "list",
        {
            0: {
                "name": None,
                "description": None,
                "parameters": ("dict", {0: (None, None)}),
                "signature": None,
                "setup_schema": ("dict", {0: (None, None)}),
            }
        },
    )
    response = client.tools.list_templates()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.tools.list_templates()
    validate_response(async_response, expected_response, expected_types)
