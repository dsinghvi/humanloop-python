# This file was auto-generated by Fern from our API Definition.

import typing

from humanloop.client import AsyncHumanloop, Humanloop

from .utilities import validate_response


async def test_list_(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = [
        {
            "name": "name",
            "parent_id": "parent_id",
            "id": "id",
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
        }
    ]
    expected_types: typing.Any = (
        "list",
        {0: {"name": None, "parent_id": None, "id": None, "created_at": "datetime", "updated_at": "datetime"}},
    )
    response = client.directories.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.directories.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "name": "name",
        "parent_id": "parent_id",
        "id": "id",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "name": None,
        "parent_id": None,
        "id": None,
        "created_at": "datetime",
        "updated_at": "datetime",
    }
    response = client.directories.create(name="name", parent_id="parent_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.directories.create(name="name", parent_id="parent_id")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "name": "name",
        "parent_id": "parent_id",
        "id": "id",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "subdirectories": [
            {
                "name": "name",
                "parent_id": "parent_id",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
            }
        ],
        "files": [
            {
                "path": "path",
                "id": "id",
                "name": "name",
                "version_id": "version_id",
                "type": "prompt",
                "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "created_by": {"id": "id", "email_address": "email_address"},
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "model": "model",
                "endpoint": "complete",
                "template": "template",
                "provider": "openai",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "seed": 1,
                "response_format": {"type": "json_object"},
                "tools": [{"name": "name", "description": "description"}],
                "linked_tools": [
                    {"name": "name", "description": "description", "id": "id", "version_id": "version_id"}
                ],
                "commit_message": "commit_message",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [{"name": "name"}],
                "evaluator_aggregates": [
                    {
                        "value": 1.1,
                        "evaluator_id": "evaluator_id",
                        "evaluator_version_id": "evaluator_version_id",
                        "created_at": "2024-01-15T09:30:00Z",
                        "updated_at": "2024-01-15T09:30:00Z",
                    }
                ],
            }
        ],
        "parents": [
            {
                "name": "name",
                "parent_id": "parent_id",
                "id": "id",
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
            }
        ],
    }
    expected_types: typing.Any = {
        "name": None,
        "parent_id": None,
        "id": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "subdirectories": (
            "list",
            {0: {"name": None, "parent_id": None, "id": None, "created_at": "datetime", "updated_at": "datetime"}},
        ),
        "files": (
            "list",
            {
                0: {
                    "path": None,
                    "id": None,
                    "name": None,
                    "version_id": None,
                    "type": None,
                    "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
                    "created_at": "datetime",
                    "updated_at": "datetime",
                    "created_by": {"id": None, "email_address": None},
                    "status": None,
                    "last_used_at": "datetime",
                    "model": None,
                    "endpoint": None,
                    "template": None,
                    "provider": None,
                    "max_tokens": "integer",
                    "temperature": None,
                    "top_p": None,
                    "stop": None,
                    "presence_penalty": None,
                    "frequency_penalty": None,
                    "seed": "integer",
                    "response_format": {"type": None},
                    "tools": ("list", {0: {"name": None, "description": None}}),
                    "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
                    "commit_message": None,
                    "version_logs_count": "integer",
                    "total_logs_count": "integer",
                    "inputs": ("list", {0: {"name": None}}),
                    "evaluator_aggregates": (
                        "list",
                        {
                            0: {
                                "value": None,
                                "evaluator_id": None,
                                "evaluator_version_id": None,
                                "created_at": "datetime",
                                "updated_at": "datetime",
                            }
                        },
                    ),
                }
            },
        ),
        "parents": (
            "list",
            {0: {"name": None, "parent_id": None, "id": None, "created_at": "datetime", "updated_at": "datetime"}},
        ),
    }
    response = client.directories.get(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.directories.get(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Humanloop, async_client: AsyncHumanloop) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.directories.delete(id="id") is None  # type: ignore[func-returns-value]

    assert await async_client.directories.delete(id="id") is None  # type: ignore[func-returns-value]


async def test_update(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "name": "name",
        "parent_id": "parent_id",
        "id": "id",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "name": None,
        "parent_id": None,
        "id": None,
        "created_at": "datetime",
        "updated_at": "datetime",
    }
    response = client.directories.update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.directories.update(id="id")
    validate_response(async_response, expected_response, expected_types)
