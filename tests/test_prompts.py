# This file was auto-generated by Fern from our API Definition.

import typing

from humanloop.client import AsyncHumanloop, Humanloop

from .utilities import validate_response


async def test_create(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "model": "model",
        "endpoint": "complete",
        "template": "template",
        "provider": "openai",
        "max_tokens": 1,
        "temperature": 1.1,
        "top_p": 1.1,
        "stop": "stop",
        "presence_penalty": 1.1,
        "frequency_penalty": 1.1,
        "other": {"other": {"key": "value"}},
        "seed": 1,
        "response_format": {"type": "json_object"},
        "tools": [{"name": "name", "description": "description"}],
        "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "model": None,
        "endpoint": None,
        "template": None,
        "provider": None,
        "max_tokens": "integer",
        "temperature": None,
        "top_p": None,
        "stop": None,
        "presence_penalty": None,
        "frequency_penalty": None,
        "other": ("dict", {0: (None, None)}),
        "seed": "integer",
        "response_format": {"type": None},
        "tools": ("list", {0: {"name": None, "description": None}}),
        "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
    }
    response = client.prompts.create(model="model")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.create(model="model")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "model": "model",
        "endpoint": "complete",
        "template": "template",
        "provider": "openai",
        "max_tokens": 1,
        "temperature": 1.1,
        "top_p": 1.1,
        "stop": "stop",
        "presence_penalty": 1.1,
        "frequency_penalty": 1.1,
        "other": {"other": {"key": "value"}},
        "seed": 1,
        "response_format": {"type": "json_object"},
        "tools": [{"name": "name", "description": "description"}],
        "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "model": None,
        "endpoint": None,
        "template": None,
        "provider": None,
        "max_tokens": "integer",
        "temperature": None,
        "top_p": None,
        "stop": None,
        "presence_penalty": None,
        "frequency_penalty": None,
        "other": ("dict", {0: (None, None)}),
        "seed": "integer",
        "response_format": {"type": None},
        "tools": ("list", {0: {"name": None, "description": None}}),
        "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
    }
    response = client.prompts.get(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.get(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: Humanloop, async_client: AsyncHumanloop) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.prompts.delete(id="id") is None  # type: ignore[func-returns-value]

    assert await async_client.prompts.delete(id="id") is None  # type: ignore[func-returns-value]


async def test_update(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "model": "model",
        "endpoint": "complete",
        "template": "template",
        "provider": "openai",
        "max_tokens": 1,
        "temperature": 1.1,
        "top_p": 1.1,
        "stop": "stop",
        "presence_penalty": 1.1,
        "frequency_penalty": 1.1,
        "other": {"other": {"key": "value"}},
        "seed": 1,
        "response_format": {"type": "json_object"},
        "tools": [{"name": "name", "description": "description"}],
        "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "model": None,
        "endpoint": None,
        "template": None,
        "provider": None,
        "max_tokens": "integer",
        "temperature": None,
        "top_p": None,
        "stop": None,
        "presence_penalty": None,
        "frequency_penalty": None,
        "other": ("dict", {0: (None, None)}),
        "seed": "integer",
        "response_format": {"type": None},
        "tools": ("list", {0: {"name": None, "description": None}}),
        "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
    }
    response = client.prompts.update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.update(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_list_versions(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "records": [
            {
                "id": "id",
                "name": "name",
                "version_id": "version_id",
                "directory_id": "directory_id",
                "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
                "created_at": "2024-01-15T09:30:00Z",
                "updated_at": "2024-01-15T09:30:00Z",
                "created_by": {"id": "id", "email_address": "email_address"},
                "status": "uncommitted",
                "last_used_at": "2024-01-15T09:30:00Z",
                "path": "path",
                "model": "model",
                "endpoint": "complete",
                "template": "template",
                "provider": "openai",
                "max_tokens": 1,
                "temperature": 1.1,
                "top_p": 1.1,
                "stop": "stop",
                "presence_penalty": 1.1,
                "frequency_penalty": 1.1,
                "seed": 1,
                "response_format": {"type": "json_object"},
                "tools": [{"name": "name", "description": "description"}],
                "linked_tools": [
                    {"name": "name", "description": "description", "id": "id", "version_id": "version_id"}
                ],
                "commit_message": "commit_message",
                "version_logs_count": 1,
                "total_logs_count": 1,
                "inputs": [{"name": "name"}],
            }
        ]
    }
    expected_types: typing.Any = {
        "records": (
            "list",
            {
                0: {
                    "id": None,
                    "name": None,
                    "version_id": None,
                    "directory_id": None,
                    "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
                    "created_at": "datetime",
                    "updated_at": "datetime",
                    "created_by": {"id": None, "email_address": None},
                    "status": None,
                    "last_used_at": "datetime",
                    "path": None,
                    "model": None,
                    "endpoint": None,
                    "template": None,
                    "provider": None,
                    "max_tokens": "integer",
                    "temperature": None,
                    "top_p": None,
                    "stop": None,
                    "presence_penalty": None,
                    "frequency_penalty": None,
                    "seed": "integer",
                    "response_format": {"type": None},
                    "tools": ("list", {0: {"name": None, "description": None}}),
                    "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
                    "commit_message": None,
                    "version_logs_count": "integer",
                    "total_logs_count": "integer",
                    "inputs": ("list", {0: {"name": None}}),
                }
            },
        )
    }
    response = client.prompts.list_versions(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.list_versions(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_deploy(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "model": "model",
        "endpoint": "complete",
        "template": "template",
        "provider": "openai",
        "max_tokens": 1,
        "temperature": 1.1,
        "top_p": 1.1,
        "stop": "stop",
        "presence_penalty": 1.1,
        "frequency_penalty": 1.1,
        "other": {"other": {"key": "value"}},
        "seed": 1,
        "response_format": {"type": "json_object"},
        "tools": [{"name": "name", "description": "description"}],
        "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "model": None,
        "endpoint": None,
        "template": None,
        "provider": None,
        "max_tokens": "integer",
        "temperature": None,
        "top_p": None,
        "stop": None,
        "presence_penalty": None,
        "frequency_penalty": None,
        "other": ("dict", {0: (None, None)}),
        "seed": "integer",
        "response_format": {"type": None},
        "tools": ("list", {0: {"name": None, "description": None}}),
        "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
    }
    response = client.prompts.deploy(id="id", version_id="version_id", environment_id="environment_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.deploy(
        id="id", version_id="version_id", environment_id="environment_id"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_commit(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "model": "model",
        "endpoint": "complete",
        "template": "template",
        "provider": "openai",
        "max_tokens": 1,
        "temperature": 1.1,
        "top_p": 1.1,
        "stop": "stop",
        "presence_penalty": 1.1,
        "frequency_penalty": 1.1,
        "other": {"other": {"key": "value"}},
        "seed": 1,
        "response_format": {"type": "json_object"},
        "tools": [{"name": "name", "description": "description"}],
        "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "model": None,
        "endpoint": None,
        "template": None,
        "provider": None,
        "max_tokens": "integer",
        "temperature": None,
        "top_p": None,
        "stop": None,
        "presence_penalty": None,
        "frequency_penalty": None,
        "other": ("dict", {0: (None, None)}),
        "seed": "integer",
        "response_format": {"type": None},
        "tools": ("list", {0: {"name": None, "description": None}}),
        "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
    }
    response = client.prompts.commit(id="id", version_id="version_id", commit_message="commit_message")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.commit(
        id="id", version_id="version_id", commit_message="commit_message"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_log(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "prompt_id": "prompt_id",
        "version_id": "version_id",
        "session_id": "session_id",
    }
    expected_types: typing.Any = {"id": None, "prompt_id": None, "version_id": None, "session_id": None}
    response = client.prompts.log()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.log()
    validate_response(async_response, expected_response, expected_types)


async def test_call(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "prompt": {
            "id": "id",
            "name": "name",
            "version_id": "version_id",
            "directory_id": "directory_id",
            "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
            "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
            "status": "uncommitted",
            "last_used_at": "2024-01-15T09:30:00Z",
            "path": "path",
            "model": "model",
            "endpoint": "complete",
            "template": "template",
            "provider": "openai",
            "max_tokens": 1,
            "temperature": 1.1,
            "top_p": 1.1,
            "stop": "stop",
            "presence_penalty": 1.1,
            "frequency_penalty": 1.1,
            "other": {"other": {"key": "value"}},
            "seed": 1,
            "response_format": {"type": "json_object"},
            "tools": [{"name": "name", "description": "description"}],
            "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
            "commit_message": "commit_message",
            "version_logs_count": 1,
            "total_logs_count": 1,
            "inputs": [{"name": "name"}],
        },
        "messages": [
            {
                "content": "content",
                "name": "name",
                "tool_call_id": "tool_call_id",
                "role": "user",
                "tool_calls": [{"id": "id", "type": "function", "function": {"name": "name"}}],
            }
        ],
        "tool_choice": "none",
        "session_id": "session_id",
        "parent_id": "parent_id",
        "inputs": {"inputs": {"key": "value"}},
        "source": "source",
        "metadata": {"metadata": {"key": "value"}},
        "save": True,
        "source_datapoint_id": "source_datapoint_id",
        "batches": ["batches"],
        "user": "user",
        "environment": "environment",
        "id": "id",
        "logs": [
            {
                "output": "output",
                "raw_output": "raw_output",
                "created_at": "2024-01-15T09:30:00Z",
                "error": "error",
                "provider_latency": 1.1,
                "output_message": {"role": "user"},
                "prompt_tokens": 1,
                "output_tokens": 1,
                "prompt_cost": 1.1,
                "output_cost": 1.1,
                "finish_reason": "finish_reason",
                "index": 1,
            }
        ],
    }
    expected_types: typing.Any = {
        "prompt": {
            "id": None,
            "name": None,
            "version_id": None,
            "directory_id": None,
            "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
            "created_at": "datetime",
            "updated_at": "datetime",
            "created_by": {"id": None, "email_address": None, "full_name": None},
            "status": None,
            "last_used_at": "datetime",
            "path": None,
            "model": None,
            "endpoint": None,
            "template": None,
            "provider": None,
            "max_tokens": "integer",
            "temperature": None,
            "top_p": None,
            "stop": None,
            "presence_penalty": None,
            "frequency_penalty": None,
            "other": ("dict", {0: (None, None)}),
            "seed": "integer",
            "response_format": {"type": None},
            "tools": ("list", {0: {"name": None, "description": None}}),
            "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
            "commit_message": None,
            "version_logs_count": "integer",
            "total_logs_count": "integer",
            "inputs": ("list", {0: {"name": None}}),
        },
        "messages": (
            "list",
            {
                0: {
                    "content": None,
                    "name": None,
                    "tool_call_id": None,
                    "role": None,
                    "tool_calls": ("list", {0: {"id": None, "type": None, "function": {"name": None}}}),
                }
            },
        ),
        "tool_choice": None,
        "session_id": None,
        "parent_id": None,
        "inputs": ("dict", {0: (None, None)}),
        "source": None,
        "metadata": ("dict", {0: (None, None)}),
        "save": None,
        "source_datapoint_id": None,
        "batches": ("list", {0: None}),
        "user": None,
        "environment": None,
        "id": None,
        "logs": (
            "list",
            {
                0: {
                    "output": None,
                    "raw_output": None,
                    "created_at": "datetime",
                    "error": None,
                    "provider_latency": None,
                    "output_message": {"role": None},
                    "prompt_tokens": "integer",
                    "output_tokens": "integer",
                    "prompt_cost": None,
                    "output_cost": None,
                    "finish_reason": None,
                    "index": "integer",
                }
            },
        ),
    }
    response = client.prompts.call()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.call()
    validate_response(async_response, expected_response, expected_types)


async def test_update_evaluators(client: Humanloop, async_client: AsyncHumanloop) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "name": "name",
        "version_id": "version_id",
        "directory_id": "directory_id",
        "environments": [{"id": "id", "created_at": "2024-01-15T09:30:00Z", "name": "name", "tag": "default"}],
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "created_by": {"id": "id", "email_address": "email_address", "full_name": "full_name"},
        "status": "uncommitted",
        "last_used_at": "2024-01-15T09:30:00Z",
        "path": "path",
        "model": "model",
        "endpoint": "complete",
        "template": "template",
        "provider": "openai",
        "max_tokens": 1,
        "temperature": 1.1,
        "top_p": 1.1,
        "stop": "stop",
        "presence_penalty": 1.1,
        "frequency_penalty": 1.1,
        "other": {"other": {"key": "value"}},
        "seed": 1,
        "response_format": {"type": "json_object"},
        "tools": [{"name": "name", "description": "description"}],
        "linked_tools": [{"name": "name", "description": "description", "id": "id", "version_id": "version_id"}],
        "commit_message": "commit_message",
        "version_logs_count": 1,
        "total_logs_count": 1,
        "inputs": [{"name": "name"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "name": None,
        "version_id": None,
        "directory_id": None,
        "environments": ("list", {0: {"id": None, "created_at": "datetime", "name": None, "tag": None}}),
        "created_at": "datetime",
        "updated_at": "datetime",
        "created_by": {"id": None, "email_address": None, "full_name": None},
        "status": None,
        "last_used_at": "datetime",
        "path": None,
        "model": None,
        "endpoint": None,
        "template": None,
        "provider": None,
        "max_tokens": "integer",
        "temperature": None,
        "top_p": None,
        "stop": None,
        "presence_penalty": None,
        "frequency_penalty": None,
        "other": ("dict", {0: (None, None)}),
        "seed": "integer",
        "response_format": {"type": None},
        "tools": ("list", {0: {"name": None, "description": None}}),
        "linked_tools": ("list", {0: {"name": None, "description": None, "id": None, "version_id": None}}),
        "commit_message": None,
        "version_logs_count": "integer",
        "total_logs_count": "integer",
        "inputs": ("list", {0: {"name": None}}),
    }
    response = client.prompts.update_evaluators(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.update_evaluators(id="id")
    validate_response(async_response, expected_response, expected_types)
